# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Color {
  id: ID!
  product: Product
  hex: String!
  name: String!
}

type Product {
  id: ID!
  colors: [Color!]
  store: Store
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  brand: String!
  sku: String!
  price: Float!
  thumbnail: String!
  images: String!
  reviews: Float!
  quantity: Float!
  dimension: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Store {
  id: ID!
  products: [Product!]
  employees: [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  bio: String!
  rate: Float!
  slug: String!
  street: String!
  city: String!
  state: String!
  country: String!
  neighborhood: String!
  number: String!
  zipCode: String!
  sales: Float!
}

type User {
  id: ID!
  role: Roles!
  status: Status!
  store: [Store!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  username: String!
  email: String!
  bio: String!
  image: String!
}

"""User possible roles"""
enum Roles {
  MEMBER
  ADMIN
  SELLER
}

"""Account status"""
enum Status {
  ACTIVE
  DISABLED
}

type AuthType {
  user: User!
  token: String!
}

input ColorInput {
  id: ID!
  product: ProductInput
  hex: String!
  name: String!
}

input ProductInput {
  id: ID!
  colors: [ColorInput!]
  store: StoreInput
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  description: String!
  brand: String!
  sku: String!
  price: Float!
  thumbnail: String!
  images: String!
  reviews: Float!
  quantity: Float!
  dimension: String!
}

input StoreInput {
  id: ID!
  products: [ProductInput!]
  employees: [UserInput!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  bio: String!
  rate: Float!
  slug: String!
  street: String!
  city: String!
  state: String!
  country: String!
  neighborhood: String!
  number: String!
  zipCode: String!
  sales: Float!
}

input UserInput {
  id: ID!
  role: Roles!
  status: Status!
  store: [StoreInput!]
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  username: String!
  email: String!
  bio: String!
  image: String!
}

type Query {
  findById(id: String!): User!
  findByEmail(email: String!): User!
  getAllProducts: [Product!]
  getAllColors: [Color!]
  findStoreById(id: String!): Store
  getAllStores: [Store!]
}

type Mutation {
  createUser(data: CreateUserDto!): User!
  login(data: AuthDto!): AuthType!
  createProduct(data: CreateProductDto!): Product!
  linkColorToProduct(data: LinkColorToProductDto!): Product
  createColor(data: CreateColorDto!): Color!
  createStore(data: CreateStoreDto!): Store!
  linkEmployeeToStore(data: LinkEmployeeToStoreDto!): Store
  linkProductToStore(data: LinkProductToStoreDto!): Store
}

input CreateUserDto {
  username: String!
  name: String!
  email: String!
  password: String!
  confirmPassword: String!
}

input AuthDto {
  email: String!
  password: String!
}

input CreateProductDto {
  title: String!
  description: String!
  brand: String!
  price: Float!
  quantity: Float!
  dimension: String!
  colors: [ColorInput!]
}

input LinkColorToProductDto {
  productId: ID!
  colorsId: [ID!]!
}

input CreateColorDto {
  hex: String!
  name: String!
}

input CreateStoreDto {
  name: String!
  bio: String!
  slug: String!
  street: String!
  city: String!
  state: String!
  country: String!
  neighborhood: String!
  zipCode: String!
  number: String!
  products: [ProductInput!]
  employees: [UserInput!]
}

input LinkEmployeeToStoreDto {
  storeId: String!
  employeesId: [ID!]!
}

input LinkProductToStoreDto {
  storeId: ID!
  productsId: [ID!]!
}
